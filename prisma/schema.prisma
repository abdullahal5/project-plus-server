generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(MEMBER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  projects        Project[]      @relation("ProjectMembers")
  tasks           Task[]         @relation("TaskAssignees")
  notifications   Notification[]
  createdProjects Project[]      @relation("ProjectCreator")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy   User      @relation("ProjectCreator", fields: [createdById], references: [id])
  createdById String

  members     User[]     @relation("ProjectMembers")
  tasks       Task[]
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  project      Project   @relation(fields: [projectId], references: [id])
  projectId    String

  assignedTo   User[]    @relation("TaskAssignees")

  dependencies Task[] @relation("TaskDependencies")
  dependentOn  Task[] @relation("TaskDependencies")
}

model Notification {
  id        String           @id @default(uuid())
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum UserRole {
  ADMIN
  MANAGER
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_DELETED
}
